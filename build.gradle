
allprojects {
	
	apply plugin: 'java'
	apply from: "${rootDir}/gradle/config.gradle"

	group = 'com.ardikars.jxnet'
	version = "${VERSION}"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	repositories {
		mavenCenter()
	}

	javadoc {
		def currentYear = Calendar.getInstance().get Calendar.YEAR
		options.with {
			locale 'en_US'
			encoding 'UTF-8'
			charSet 'UTF-8'
			author true
			windowTitle "Jxnet ${project.version}"
			header "Jxnet ${project.version}"
			docTitle "Jxnet ${project.version} API Documentation"
			footer 'https://github.com/ardikars/Jxnet'
			bottom "Copyright &copy; 2015 - ${currentYear} ardikars.com. All rights reserved."
			showFromProtected()
			addStringOption 'Xdoclint:all,-reference', '-quiet'
		}
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	build {
		tasks['test'].enabled = false
	}
	
}

subprojects.each {
	subproject -> evaluationDependsOn(subproject.path)
}

jar.dependsOn subprojects.tasks['classes']

javadoc.dependsOn subprojects.tasks['javadoc']

clean {
	dependsOn subprojects.tasks['clean']
	file("${rootDir}/out").deleteDir()
	file("${rootDir}/obj").deleteDir()
	file("${rootDir}/jni/Makefile").delete()
	file("${rootDir}/jni/src/Makefile").delete()
	file("${rootDir}/jni/Makefile.in").delete()
	file("${rootDir}/jni/src/Makefile.in").delete()
	file("${rootDir}/jni/aclocal.m4").delete()
	file("${rootDir}/jni/compile").delete()
	file("${rootDir}/jni/config.guess").delete()
	file("${rootDir}/jni/config.log").delete()
	file("${rootDir}/jni/config.status").delete()
	file("${rootDir}/jni/configure").delete()
	file("${rootDir}/jni/depcomp").delete()
	file("${rootDir}/jni/install-sh").delete()
	file("${rootDir}/jni/libtool").delete()
	file("${rootDir}/jni/ltmain.sh").delete()
	file("${rootDir}/jni/missing").delete()
	file("${rootDir}/jni/config.sub").delete()
	file("${rootDir}/jni/autom4te.cache").deleteDir()
	file("${rootDir}/jni/.autotools").delete()
	file("${rootDir}/jni/jxnet-1.1.0.tar.gz").delete()
	file("${rootDir}/jni/src/.deps").deleteDir()
	file("${rootDir}/jni/src/.libs").deleteDir()
	delete fileTree("${rootDir}/jni/src") { include '**/*.o'
		include '**/*.lo'
		include '**/*.la'
	}
	file("${rootDir}/tools/jni/progs/capsh").delete()
	file("${rootDir}/tools/jni/progs/getcap").delete()
	file("${rootDir}/tools/jni/progs/getpcaps").delete()
	file("${rootDir}/tools/jni/progs/setcap").delete()
	file("${rootDir}/tools/obj").deleteDir()
	file("${rootDir}/tools/jni/libcap/libcap.pc").delete()
	file("${rootDir}/tools/jni/libcap/libcap.so").delete()
	file("${rootDir}/tools/jni/libcap/libcap.so.2").delete()
	file("${rootDir}/tools/jni/libcap/libcap.so.2.25").delete()
	file("${rootDir}/tools/jni/libcap/_makenames").delete()
}

jar {
	subprojects.each { subproject ->
		from subproject.sourceSets.main.output.classesDir
		from subproject.sourceSets.main.output.resourcesDir
	}
}

sourcesJar {
	subprojects.each { subproject ->
		classifier = 'sources'
		from subproject.sourceSets.main.allSource
	}
}

javadocJar {
	subprojects.each { subproject ->
		classifier = 'javadoc'
		from subproject.javadoc
	}
}

task ndkBuild(type: Exec) {
	dependsOn ':tools:ndkBuildTools'
	dependsOn ':jxnet-core:generateJNIHeaders'
	commandLine "${NDK_HOME}/ndk-build", '-C', "${rootDir}",
			"NDK_LIBS_OUT=${JXNET_OUT}", "NDK_OUT=${JXNET_OBJ}"
}

