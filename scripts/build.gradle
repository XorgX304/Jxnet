apply plugin: 'idea'
apply plugin: 'c'
apply plugin: 'java'

apply plugin: 'maven'

sourceSets {
        main {
                java {
                        srcDir 'java'
                }
        }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.project {
	    groupId 'com.ardikars.jxnet'
            artifactId 'jxnet'
            version '0.0.8'
	    name 'Jxnet'
            licenses {
                license {
                    name 'GNU Lesser General Public License Version 3'
                    url 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
                }
            }
	    developers {
                developer {
		    id 'ardikars'
		    name 'Ardika Rommy Sanjaya'
		    email 'contact@ardikars.com'
                }
	    }
        }
    }
}

ext {
    thirdPartyLibsDir = file('../lib/x64')
    headersDir = file('c/include')
    currentJvm = org.gradle.internal.jvm.Jvm.current()
    javaHome = currentJvm.javaHome.absolutePath
}

model {
    platforms {
//	linux_x86 {
//            architecture "x86"
//            operatingSystem "linux"
//        }
	linux_arm {
            architecture "arm"
            operatingSystem "linux"
        }
        linux_x86_64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        linux_amd64 {
            architecture "amd64"
            operatingSystem "linux"
        }
//        windows_x86 {
//            architecture "x86"
//            operatingSystem "windows"
//        }
        windows_x86_64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }

    buildTypes {
        debug
        release
    }

    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                headers.srcDirs "${javaHome}/include", "${javaHome}/include/linux", "${javaHome}/include/win32"
            }
        }
    }
}

model {
    components {
        main(NativeLibrarySpec) {
//	    targetPlatform 'linux_x86'
	    targetPlatform 'linux_arm'
            targetPlatform 'linux_x86_64'
	    targetPlatform 'linux_amd64'
//	    targetPlatform 'windows_x86'
	    targetPlatform 'windows_x86_64'
	    targetPlatform 'windows_amd64'

            sources.c {
                source {
                    srcDir 'c'
                    include '*.c'
                }
                lib library: 'jdk', linkage: 'api'
            }

            binaries.withType(StaticLibraryBinarySpec) { buildable = false }

            binaries.all {
                /*
                if (buildType == buildTypes.debug) {
                    cCompiler.args '-pg', '-g'
                    cCompiler.define 'DEV'
                } else {
                    cCompiler.args '-O2'
                }
                */

                cCompiler.args '-std=gnu11'

                if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-L $thirdPartyLibsDir", "-I$headersDir"
                    linker.args '-lwpcap', '-liphlpapi'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-fPIC', "-L $thirdPartyLibsDir", "-I$headersDir"
                    linker.args '-lpcap'
                }

            }
        }
    }

    toolChains {
        gcc(Gcc) {
            eachPlatform { tools ->
                tools.cCompiler.executable = "gcc"
		//path "/usr/bin/gcc"
            }
        }
	gccArm(Gcc) {
	    eachPlatform { tools ->
                tools.cCompiler.executable = "arm-linux-gnueabihf-cpp"
                //path "/usr/bin/gcc"
            }
	}
	clang(Clang)
    }
}

