
/**
 * Copyright (C) 2017  Ardika Rommy Sanjaya
 */

apply plugin: 'c'

ext {
	currentJvm = org.gradle.internal.jvm.Jvm.current()
	javaHome = currentJvm.javaHome.absolutePath
}

model {

	components {

		main(NativeLibrarySpec) {
			
			sources.c {
				source {
					srcDir "${rootDir}/src"
					include '*.c'
				}
				lib library: 'jdk', linkage: 'api'
			}

			binaries.withType(StaticLibraryBinarySpec) { buildable = false } // disable static libs generation
		
			binaries.all { 

				def os_arch = System.properties['os.arch'].toLowerCase();
			
				if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
					cCompiler.args '-fPIC'
					linker.args '-lpcap'
				} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
					if (os_arch.contains('x64')) {
						cCompiler.args "-I${rootDir}/include", "-I${rootDir}/include/jxnet"
						linker.args '-Wl,--export-all-symbols', '-Wl,--add-stdcall-alias', "-L${rootDir}/lib/x64", '-lwpcap', '-liphlpapi'
					} else {
						cCompiler.args "-I${rootDir}/include", "-I${rootDir}/include/jxnet"
						linker.args '-Wl,--export-all-symbols', '-Wl,--add-stdcall-alias', "-L${rootDir}/lib", '-lwpcap', '-liphlpapi'
					}
				} else {
					println "UNKNOWN PLATFORM"
				}
			}
			
		}
		
	}
	
	repositories {
		libs(PrebuiltLibraries) {
			jdk {
				headers.srcDirs "${javaHome}/include", "${javaHome}/include/linux", "${javaHome}/include/win32"
			}
		}
	}
	
}

