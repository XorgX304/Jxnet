
/**
 * Copyright (C) 2017-2018  Ardika Rommy Sanjaya
 */

ext {
	os_arch = System.properties['os.arch'].toLowerCase()
	currentJvm = org.gradle.internal.jvm.Jvm.current()
	javaHome = currentJvm.javaHome.absolutePath
}

model {

    components {

        jxnet(NativeLibrarySpec) {

            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                if (os_arch.contains('64')) {
                    baseName = 'jxnet-windows-x64'
                } else {
                    baseName = 'jxnet-windows-x32'
                }
            } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                if (os_arch.contains('64')) {
                    baseName = 'jxnet-darwin-x64'
                } else {
                    baseName = 'jxnet-darwin-x32'
                }
            } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                if (os_arch.contains('64')) {
                    baseName = 'jxnet-linux-x64'
                } else {
                    baseName = 'jxnet-linux-x32'
                }
            } else if (org.gradle.internal.os.OperatingSystem.current().isUnix()) {
                if (os_arch.contains('64')) {
                    baseName = 'jxnet-unix-x64'
                } else {
                    baseName = 'jxnet-unix-x32'
                }
            }

            sources.c {
                source {
                    srcDir "${rootDir}/jxnet-native/src"
                    include '*.c'
                }
                lib library: 'jdk', linkage: 'api'
            }

            binaries.withType(StaticLibraryBinarySpec) { buildable = false } // disable static libs generation

            binaries.all {
                if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                    if (os_arch.contains('64')) {
                        cCompiler.args "-I${rootDir}/include", "-I${rootDir}/include/jxnet"
                        linker.args '-Wl,--export-all-symbols', '-Wl,--add-stdcall-alias', "-L${rootDir}/lib/x64", '-lwpcap', '-liphlpapi'
                    } else {
                        cCompiler.args "-I${rootDir}/include", "-I${rootDir}/include/jxnet"
                        linker.args '-Wl,--export-all-symbols', '-Wl,--add-stdcall-alias', "-L${rootDir}/lib", '-lwpcap', '-liphlpapi'
                    }
                } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                    cCompiler.args '-fPIC'
                    linker.args '-lpcap'
                } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                    cCompiler.args '-fPIC'
                    linker.args '-lpcap'
                } else if (org.gradle.internal.os.OperatingSystem.current().isUnix()) {
                    cCompiler.args '-fPIC'
                    linker.args '-lpcap'
                } else {
                    println "Unknown platform"
                }
            }

        }


    }

    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                headers.srcDirs "${javaHome}/include", "${javaHome}/include/linux", "${javaHome}/include/win32", "${javaHome}/include/darwin"
            }
        }
    }

}

task installLibrary(type:Copy, dependsOn:[assemble]) {
    copy {
        from "${buildDir}/libs/jxnet/shared"
        into "${rootDir}/jxnet-core/src/main/resources/native"
    }
}
